[{"C:\\Users\\jason\\React\\my-react-app\\Client\\src\\index.js":"1","C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Components\\NavPage\\Nav.js":"2","C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\LearningCourses\\ReactCourse\\Page.js":"3","C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\Projects\\Artifact\\ArtifactApp.js":"4","C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\Projects\\TicTacToe\\TicTacToe.js":"5","C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\LearningCourses\\ReactCourse\\ReactCourse.js":"6","C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\Projects\\Artifact\\ArtTest.js":"7","C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\LearningCourses\\ResponsiveWebDesign\\App.js":"8","C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\Projects\\YGOReplays&Images\\ReplayImages.js":"9"},{"size":722,"mtime":1732093582547,"results":"10","hashOfConfig":"11"},{"size":4332,"mtime":1731830835540,"results":"12","hashOfConfig":"11"},{"size":128,"mtime":1704974941293,"results":"13","hashOfConfig":"11"},{"size":23015,"mtime":1729155122555,"results":"14","hashOfConfig":"11"},{"size":2343,"mtime":1731818303321,"results":"15","hashOfConfig":"11"},{"size":3276,"mtime":1704974942647,"results":"16","hashOfConfig":"11"},{"size":800,"mtime":1729505790903,"results":"17","hashOfConfig":"11"},{"size":31568,"mtime":1730713568987,"results":"18","hashOfConfig":"11"},{"size":4118,"mtime":1704604427999,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"129bpbw",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"C:\\Users\\jason\\React\\my-react-app\\Client\\src\\index.js",[],[],"C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Components\\NavPage\\Nav.js",[],[],"C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\LearningCourses\\ReactCourse\\Page.js",[],[],"C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\Projects\\Artifact\\ArtifactApp.js",["51","52"],[],"import './Artifact.css';\r\nimport { useState, useEffect } from 'react';\r\n\r\n\r\n/*todo: move common values to a higher scope to pass to child components*/\r\n\r\n/*\r\nThis is my main state functionality practice, moving states around and working with them in different ways and trying to keep it neat and tidy\r\nMost complicated thing I'm working on currently.\r\n\r\n.css could use work but not important for this I suppose\r\n\r\nCurrently it sort of works but I don't understand how state works exactly; lack of good resources and chatGPT is outdated by 2 years.\r\n\r\nPiece selected>\r\nif feather or flower > auto assign value----- Done :)\r\nif goblet/circlet/sands > pick stat > Auto assign value------Done\r\n\r\nAlso added so if the error message pops up, it'll reset to drop down menu to a blank state.\r\n\r\nReact doesn't like null values so I changed them to ''.\r\n\r\ntodo:\r\n-if piece changes I want it to reset all values to ''. ## resets but not visually? ----Done 30/03/24 Values reset visually as well.\r\n-Save and Load functions. ##Save works but load doesn't, \r\nI can see artifact values are saved to localstorage but load doesn't populate my object-----Done 30/03/24 Values save, load and populate the fields :)\r\n-Artifact levels + main values\r\n-Sets 2p and 4p optimizer\r\n-Save more than 1 piece, specific pieces\r\n-figure out how to load individual selected pieces\r\n-implement S.R.P(Single Responsibility Principle)\r\n-Populate dropdown list from localstorage (Save an array of stuff? load array of stuff)\r\n*/\r\n\r\n// function Piece(statArrays){\r\n//   const [piece, setPiece] = useState('')\r\n//   const handlePieceSelection = (value) => {setPiece(value)}\r\n//   return(\r\n//     <>\r\n//     <label for='piece'>Enter piece: \r\n//       <PieceStringDropMenu id='piece' onChange={handlePieceSelection} useArray={statArrays.artPieces}/>\r\n//     </label>\r\n//     <Main piece={piece}/>\r\n//     <ObjectCreate p={piece}/>\r\n//     </>\r\n//   )\r\n// }\r\n\r\n// //Trying to modularize the big chuck of code into smaller parts 24-01-24\r\n// function Main(piece, statArrays){\r\n//   const [mainStat, setMainStat] = useState('')\r\n//   useEffect(() => {MainStat(piece);}, [piece]);\r\n//   const handleMainSelection = (value) => (setMainStat(value))\r\n\r\n//   function MainStat(piece){\r\n//     switch(piece){\r\n//       case \"Flower\":\r\n//         setMainStat(\"HP\");\r\n//         return;\r\n//       case \"Feather\":\r\n//         setMainStat(\"ATK\");\r\n//         return;\r\n//       default:\r\n//         setMainStat('')\r\n//         return;\r\n//     }\r\n//   }\r\n\r\n//   const [mainValue, setMainValue] = useState('')\r\n//   useEffect(() => {MainValue(mainStat)}, [mainStat]);\r\n\r\n//   function MainValue(mainStat){\r\n//     switch(mainStat){\r\n//       case '':\r\n//         setMainValue('')\r\n//         return;\r\n//       case \"HP\":\r\n//         setMainValue(\"100\")\r\n//         return;\r\n//       case \"ATK\":\r\n//         setMainValue(\"todo1\")\r\n//         return;\r\n//       case \"HP%\":\r\n//         setMainValue(\"todo\")\r\n//         return;\r\n//       case \"DEF%\":\r\n//         setMainValue(\"Value go here\")\r\n//         return;\r\n//       case \"ATK%\":\r\n//         setMainValue(\"words words\")\r\n//         return;\r\n//       case \"Energy Recharge\":\r\n//         setMainValue(\"huh\")\r\n//         return;\r\n//       case \"Elemental Mastery\":\r\n//         setMainValue(\"this stuff confusing\")\r\n//         return;\r\n//       case \"Healing Bonus\":\r\n//         setMainValue(\"hey\")\r\n//         return;\r\n//       case \"Elemental DMG Bonus\":\r\n//         setMainValue(\"ugh\")\r\n//         return;\r\n//       case \"Critical DMG\":\r\n//         setMainValue(\"moving varibles and values around is tough :(\")\r\n//         return;\r\n//       case \"Critical Rate\":\r\n//         setMainValue(\"good stat\")\r\n//         return;   \r\n//       default:\r\n//         setMainValue('')\r\n//         return;\r\n//     }\r\n//   }\r\n//   return(\r\n//     <>\r\n//     {piece === \"Timepiece\" && (\r\n//     <MainStringDropMenu  piece={piece} onChange={handleMainSelection} useArray={statArrays.sandMain}/>\r\n//     )}\r\n//     {piece === \"Goblet\" && (\r\n//       <MainStringDropMenu piece={piece} onChange={handleMainSelection} useArray={statArrays.gobletMain}/>\r\n//     )}\r\n//     {piece === \"Circlet\" && (\r\n//       <MainStringDropMenu piece={piece} onChange={handleMainSelection} useArray={statArrays.hatMain}/>\r\n//     )}\r\n//     <SubStringDropMenu main={mainValue}/>\r\n//     <ObjectCreate mn={mainStat} ms={mainStat}/>\r\n//     </>\r\n//   )\r\n// }\r\n\r\nfunction ArtifactApp(){\r\n  const statArrays = Arrays();\r\n\r\n  const [piece, setPiece] = useState('')\r\n  const handlePieceSelection = (value) => {setPiece(value)}\r\n\r\n  const handleMainSelection = (value) => (setMainStat(value))\r\n  const [mainStat, setMainStat] = useState('')\r\n  useEffect(() => {MainStat(piece);}, [piece]);\r\n\r\n  function MainStat(piece){\r\n    switch(piece){\r\n      case \"Flower\":\r\n        setMainStat(\"HP\");\r\n        return;\r\n      case \"Feather\":\r\n        setMainStat(\"ATK\");\r\n        return;\r\n      default:\r\n        setMainStat('')\r\n        return;\r\n    }\r\n  }\r\n  const [mainValue, setMainValue] = useState('')\r\n  useEffect(() => {MainValue(mainStat)}, [mainStat]);\r\n\r\n  function MainValue(mainStat){\r\n    switch(mainStat){\r\n      case '':\r\n        setMainValue('')\r\n        return;\r\n      case \"HP\":\r\n        setMainValue(\"100\")\r\n        return;\r\n      case \"ATK\":\r\n        setMainValue(\"todo1\")\r\n        return;\r\n      case \"HP%\":\r\n        setMainValue(\"todo\")\r\n        return;\r\n      case \"DEF%\":\r\n        setMainValue(\"Value go here\")\r\n        return;\r\n      case \"ATK%\":\r\n        setMainValue(\"words words\")\r\n        return;\r\n      case \"Energy Recharge\":\r\n        setMainValue(\"huh\")\r\n        return;\r\n      case \"Elemental Mastery\":\r\n        setMainValue(\"this stuff confusing\")\r\n        return;\r\n      case \"Healing Bonus\":\r\n        setMainValue(\"hey\")\r\n        return;\r\n      case \"Elemental DMG Bonus\":\r\n        setMainValue(\"ugh\")\r\n        return;\r\n      case \"Critical DMG\":\r\n        setMainValue(\"moving varibles and values around is tough :(\")\r\n        return;\r\n      case \"Critical Rate\":\r\n        setMainValue(\"good stat\")\r\n        return;   \r\n      default:\r\n        setMainValue('')\r\n        return;\r\n    }\r\n  }\r\n  \r\n  const [selectedStat1, setSelectedStat1] = useState('') //the value of the drop down box.\r\n  const handleSelectedStat1 = (value) => {setSelectedStat1(value)}\r\n  const [statValue1, setStatValue1] = useState('')//This works currently, displays correct values\r\n  const handleStatValue1 = (input) => { setStatValue1(input)}\r\n\r\n  const [selectedStat2, setSelectedStat2] = useState('')\r\n  const handleSelectedStat2 = (value) => {setSelectedStat2(value)}\r\n  const [statValue2, setStatValue2] = useState('')\r\n  const handleStatValue2 = (input) => { setStatValue2(input)}\r\n\r\n  const [selectedStat3, setSelectedStat3] = useState('')\r\n  const handleSelectedStat3 = (value) => {setSelectedStat3(value)}\r\n  const [statValue3, setStatValue3] = useState('')\r\n  const handleStatValue3 = (input) => { setStatValue3(input)}\r\n\r\n  const [selectedStat4, setSelectedStat4] = useState('')\r\n  const handleSelectedStat4 = (value) => {setSelectedStat4(value)}\r\n  const [statValue4, setStatValue4] = useState('')\r\n  const handleStatValue4 = (input) => {setStatValue4(input)}\r\n\r\n  const [reset, setReset] = useState(false)\r\n  const handleValueReset = () =>{\r\n    setReset(true);\r\n  }\r\n  useEffect(() => {\r\n    if (reset) {\r\n    setPiece('');\r\n    setMainValue('');\r\n    setMainStat('');\r\n    setSelectedStat1('');\r\n    setStatValue1('');\r\n    setSelectedStat2('');\r\n    setStatValue2('');\r\n    setSelectedStat3('');\r\n    setStatValue3('');\r\n    setSelectedStat4('');\r\n    setStatValue4('');\r\n    setReset(false);\r\n    console.log(reset);\r\n    }\r\n  }, [reset]);\r\n\r\n\r\n  const [data, setData] = useState([])\r\n  const [loaded, setLoaded] = useState(false)\r\n  const handleLoad = () => {\r\n    setLoaded(true)\r\n    load('artifact')\r\n  } \r\n  //Change it here, reuse this part so when I click on the artifact, it'll populate fields.\r\n  //I'll have to save data as an array to become stringyfied? Then I have to change the use effect to load the individual artifacts into a list.\r\n  //So load will load the data array which is made of artifacts like data[0].Piece.\r\n  //I'll have to populate a list based on the loaded array>Click will then populate fields based on the above like data[0].Piece.\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    if(data !== null){\r\n      setPiece(data.Piece);\r\n      setMainStat(data.MainName);\r\n      setMainValue(data.MainStat);\r\n      setSelectedStat1(data.SubName1);\r\n      setStatValue1(data.SubValue1);\r\n      setSelectedStat2(data.SubName2);\r\n      setStatValue2(data.SubValue2);\r\n      setSelectedStat3(data.SubName3);\r\n      setStatValue3(data.SubValue3);\r\n      setSelectedStat4(data.SubName4);\r\n      setStatValue4(data.SubValue4);\r\n      setLoaded(false)\r\n      console.log('loaded')\r\n      console.log(data)\r\n    }\r\n  },[data])\r\n\r\n  \r\n  const load = (key) => {\r\n    const data = localStorage.getItem(key)\r\n    setData(data ? JSON.parse(data) : null); //set data \r\n  };\r\n\r\n  const save = (key, data) =>{\r\n    localStorage.setItem(key, JSON.stringify(data));\r\n    alert('Saved')\r\n  };\r\n\r\n  const a = ObjectCreate(piece, mainStat, mainValue, selectedStat1, statValue1, selectedStat2, statValue2, selectedStat3, statValue3, selectedStat4, statValue4)\r\n \r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"LrgCont\">\r\n        <div className=\"MedCont\">\r\n          <div className=\"SmlCont\">\r\n            <div className=\"\">\r\n        \r\n              <label htmlFor=\"piece\">\r\n                Enter piece:\r\n                <DropMenu\r\n                  id=\"piece\"\r\n                  onChange={handlePieceSelection}\r\n                  useArray={statArrays.artPieces}\r\n                  reset={reset}\r\n                  load={loaded}\r\n                  data={data.Piece}\r\n                />\r\n              </label>\r\n              <MainSelectionDropMenu\r\n                piece={piece}\r\n                handleMainSelection={handleMainSelection}\r\n                statArrays={statArrays}\r\n                reset={reset}\r\n                load={loaded}\r\n                data={data}\r\n              />\r\n            </div>\r\n\r\n            <legend>\r\n              Substats:\r\n              <div className=\"\">\r\n                {/* {mainStat !== '' && ( */}\r\n                <div>\r\n                  <SubStringDropMenu\r\n                    main={mainStat}\r\n                    sub1={selectedStat1}\r\n                    sub2={selectedStat2}\r\n                    sub3={selectedStat3}\r\n                    sub4={selectedStat4}\r\n                    useArray={statArrays.substats}\r\n                    reset={reset}\r\n                    load={loaded}\r\n                    data={data.SubName1}\r\n                    onChange={handleSelectedStat1}\r\n                  />\r\n                  {selectedStat1 !== \"\" && (\r\n                    <IntegerInputBox\r\n                      selectedStat={selectedStat1}\r\n                      onEnter={handleStatValue1}\r\n                      data={data.SubValue1}\r\n                    />\r\n                  )}\r\n                </div>\r\n                {/* )} */}\r\n\r\n                {/* {statValue1 !== '' &&( */}\r\n                <div>\r\n                  <SubStringDropMenu\r\n                    main={mainStat}\r\n                    sub1={selectedStat1}\r\n                    sub2={selectedStat2}\r\n                    sub3={selectedStat3}\r\n                    sub4={selectedStat4}\r\n                    useArray={statArrays.substats}\r\n                    reset={reset}\r\n                    load={loaded}\r\n                    data={data.SubName2}\r\n                    onChange={handleSelectedStat2}\r\n                  />\r\n                  {selectedStat2 !== \"\" && (\r\n                    <IntegerInputBox\r\n                      selectedStat={selectedStat2}\r\n                      onEnter={handleStatValue2}\r\n                      data={data.SubValue2}\r\n                    />\r\n                  )}\r\n                </div>\r\n                {/* )} */}\r\n\r\n                {/* {statValue2 !== '' && ( */}\r\n                <div>\r\n                  <SubStringDropMenu\r\n                    main={mainStat}\r\n                    sub1={selectedStat1}\r\n                    sub2={selectedStat2}\r\n                    sub3={selectedStat3}\r\n                    sub4={selectedStat4}\r\n                    useArray={statArrays.substats}\r\n                    reset={reset}\r\n                    load={loaded}\r\n                    data={data.SubName3}\r\n                    onChange={handleSelectedStat3}\r\n                  />\r\n                  {selectedStat3 !== \"\" && (\r\n                    <IntegerInputBox\r\n                      selectedStat={selectedStat3}\r\n                      onEnter={handleStatValue3}\r\n                      data={data.SubValue3}\r\n                    />\r\n                  )}\r\n                </div>\r\n                {/* )} */}\r\n\r\n                {/* {statValue3 !== '' &&( */}\r\n                <div>\r\n                  <SubStringDropMenu\r\n                    main={mainStat}\r\n                    sub1={selectedStat1}\r\n                    sub2={selectedStat2}\r\n                    sub3={selectedStat3}\r\n                    sub4={selectedStat4}\r\n                    useArray={statArrays.substats}\r\n                    reset={reset}\r\n                    load={loaded}\r\n                    data={data.SubName4}\r\n                    onChange={handleSelectedStat4}\r\n                  />\r\n                  {selectedStat4 !== \"\" && (\r\n                    <IntegerInputBox\r\n                      selectedStat={selectedStat4}\r\n                      onEnter={handleStatValue4}\r\n                      data={data.SubValue4}\r\n                    />\r\n                  )}\r\n                </div>\r\n                {/* )} */}\r\n              </div>\r\n            </legend>\r\n          </div>\r\n        </div>\r\n\r\n        {\r\n          /*statValue4 !== '' &&*/ <div className=\"MedCont\">\r\n            <div className=\"SmlCont\">\r\n              <DisplayArtifact artifact={a} />\r\n            </div>\r\n          </div>\r\n        }\r\n\r\n        <div className=\"optionsMenu\">\r\n          <button onClick={() => save(\"artifact\", a)}>Save</button>\r\n          <button onClick={handleLoad}>Load</button>\r\n          <button onClick={handleValueReset}>Clear</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// function LoadReset(useArray, reset, data, load){\r\n//   if(reset){\r\n//     return( //if piece is !'' > Clear Object?\r\n//       <select>\r\n//         <option key={useArray[0]} value={useArray[0]}>{useArray[0]}</option>\r\n//       </select>\r\n//       );\r\n//     }\r\n//     if(load){\r\n//       return(\r\n//       <select>\r\n//         <option key={data} value={data}>{data}</option>\r\n//       </select>\r\n//       )\r\n//     }\r\n// }\r\n\r\n\r\nfunction LoadedArtifactMenu(){\r\n  let items ={}\r\n  return(\r\n    <select>\r\n      <option></option>\r\n    </select>\r\n  )\r\n}\r\n\r\nfunction MainSelectionDropMenu({piece, handleMainSelection, statArrays, reset, loaded, data}) {\r\n  if (piece === \"Timepiece\")\r\n    return (\r\n      <DropMenu\r\n        piece={piece}\r\n        onChange={handleMainSelection}\r\n        useArray={statArrays.sandMain}\r\n        reset={reset}\r\n        load={loaded}\r\n        data={data.Piece}\r\n      />\r\n    );\r\n  if (piece === \"Goblet\")\r\n    return (\r\n      <DropMenu\r\n        piece={piece}\r\n        onChange={handleMainSelection}\r\n        useArray={statArrays.gobletMain}\r\n        reset={reset}\r\n        load={loaded}\r\n        data={data.Piece}\r\n      />\r\n    );\r\n  if (piece === \"Circlet\")\r\n    return (\r\n      <DropMenu\r\n        piece={piece}\r\n        onChange={handleMainSelection}\r\n        useArray={statArrays.hatMain}\r\n        reset={reset}\r\n        load={loaded}\r\n        data={data.Piece}\r\n      />\r\n    );\r\n}\r\n\r\nfunction DropMenu({onChange, useArray, reset, load, data}) {\r\n  if(reset){\r\n  return( //if piece is !'' > Clear Object?\r\n    <select>\r\n      <option key={useArray[0]} value={useArray[0]}>{useArray[0]}</option>\r\n    </select>\r\n    );\r\n  }\r\n  if(load){\r\n    return(\r\n    <select>\r\n      <option key={data} value={data}>{data}</option>\r\n    </select>\r\n    )\r\n  }\r\n  return(\r\n    <select onChange={(event) => onChange(event.target.value)}>\r\n    {useArray.map((stat) => (\r\n      <option key={stat} value={stat}>{stat}</option>))}\r\n  </select>\r\n  )\r\n};\r\n\r\nfunction SubStringDropMenu({onChange, useArray, reset, load, data, main, sub1, sub2, sub3, sub4}) {\r\n  if(reset){\r\n    return(\r\n      <select>\r\n        <option key={useArray[0]} value={useArray[0]}>{useArray[0]}</option>\r\n      </select>\r\n    );\r\n  };\r\n  if(load){\r\n    return(\r\n      <select>\r\n        <option key={data} value={data}>{data}</option>\r\n      </select>\r\n    );\r\n  };\r\n  return(\r\n  <select onChange={(e) => {\r\n    if(SelectionValidation(e.target.value, main, sub1, sub2, sub3, sub4)){\r\n      onChange(e.target.value);\r\n    }\r\n    else{\r\n      alert(\"IMPOSSIBLE\");\r\n      e.target.value = '';\r\n    }}}>\r\n    {useArray.map((stat) => (\r\n    <option key={stat} value={stat}>{stat}</option>))}\r\n  </select>\r\n  );\r\n};\r\n\r\nfunction SelectionValidation(value, main ,sub1, sub2, sub3, sub4){\r\n  return(value !== main && value !== sub1 && value !== sub2 && value !== sub3 && value !== sub4 && main !== '') ? true : false;\r\n}\r\n\r\n// function Valid({value, main, sub1, sub2, sub3, sub4}){\r\n//   if(!SelectionValidation(value, main, sub1, sub2, sub3, sub4)){\r\n//     alert(\"IMPOSSIBLE\")\r\n//     return false;\r\n//   }\r\n//   return true;\r\n// }\r\n\r\nfunction IntegerInputBox({onEnter, selectedStat, data}){\r\n  const handleKey = (e) => {\r\n    if(e.key === \"Enter\"){\r\n      if(selectedStat){\r\n        let inputVal = e.target.value; //simplfies it slightly for only two instances, guess it saves a few characters.\r\n        let valid = ValidSubStatValues(inputVal, selectedStat)\r\n        if (valid){\r\n          onEnter(inputVal)\r\n        }\r\n        else{\r\n          alert('nah m8');\r\n          e.target.value= '';\r\n        }\r\n      }\r\n      else{\r\n      alert('bad');\r\n      }\r\n    }\r\n  };\r\n  if(data){\r\n    return(\r\n      <input placeholder={data} onChange = {() => data}/>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n    <input placeholder='Substat Value'\r\n    onChange={(event) => event.target.value}\r\n    onKeyDown={handleKey}\r\n    />\r\n    </>\r\n  );\r\n}\r\n\r\n/*Created to more easily display and potentially save and load artifacts when I make those functions.*/\r\nfunction ObjectCreate(p, mn, ms, sn1, sv1, sn2, sv2, sn3, sv3, sn4, sv4){\r\n  const artifact = {\r\n    Piece: p, \r\n    MainName: mn,\r\n    MainStat: ms,\r\n    SubName1: sn1,\r\n    SubValue1: sv1,\r\n    SubName2: sn2,\r\n    SubValue2: sv2,\r\n    SubName3: sn3,\r\n    SubValue3: sv3,\r\n    SubName4: sn4,\r\n    SubValue4: sv4,\r\n  };\r\n  return artifact;\r\n}\r\n\r\nfunction ValidSubStatValues(uinput, sn){\r\n  let modVal = [];\r\n  const val = uinput;\r\n  let low;\r\n  let high;\r\n  switch (sn)//Using the actual values but not the practical values\r\n  {\r\n    case \"Elemental Mastery\":\r\n        modVal = [16, 19, 21, 23]; //16.32, 18.65, 20.98, 23.31\r\n        low = 16;\r\n        high = 140;\r\n        if (val >= low && val <= high && (val % modVal[0] === 0 | val % modVal[1] === 0 | val % modVal[2] === 0 | val % modVal[3] === 0)) return true;\r\n        return false;\r\n    case \"Energy Recharge\":\r\n        modVal = [4.5, 5.2, 5.8, 6.5]; //4.53, 5.18, 5.83, 6.48\r\n        low = 4.5;\r\n        high = 39;\r\n        if (val >= low && val <= high && (val % modVal[0] === 0 | val % modVal[1] === 0 | val % modVal[2] === 0 | val % modVal[3] === 0)) return true;\r\n        return false;\r\n    case \"ATK\":\r\n        modVal = [14, 16, 18, 19]; //13.62, 15.56, 17.51, 19.45\r\n        low = 13.62;\r\n        high = 117;\r\n        if (val >= low && val <= high && (val % modVal[0] === 0 | val % modVal[1] === 0 | val % modVal[2] === 0 | val % modVal[3] === 0)) return true;\r\n        return false;\r\n    case \"DEF\":\r\n        modVal= [16, 19, 21, 23]; //16.2, 18.52, 20.83, 23.15\r\n        low = 16;\r\n        high = 139;\r\n        if (val >= low && val <= high && (val % modVal[0] === 0 | val % modVal[1] === 0 | val % modVal[2] === 0 | val % modVal[3] === 0)) return true;\r\n        return false;\r\n    case \"HP\":\r\n        modVal=[209, 239, 269, 299]; //209.13, 239, 268.88, 298.75\r\n        low = 209;\r\n        high = 1794;\r\n        if (val >= low && val <= high && (val % modVal[0] === 0 | val % modVal[1] === 0 | val % modVal[2] === 0 | val % modVal[3] === 0)) return true;\r\n        return false;\r\n    case \"ATK%\":\r\n        modVal = [4.1, 4.7, 5.3, 5.8]; //4.08, 4.66, 5.25, 5.83\r\n        low = 4.1;\r\n        high = 35;\r\n        if (val >= low && val <= high && (val % modVal[0] === 0 | val % modVal[1] === 0 | val % modVal[2] === 0 | val % modVal[3] === 0)) return true;\r\n        return false;\r\n    case \"DEF%\":\r\n        modVal=[5.1, 5.8, 6.6, 7.3]; //5.1, 5.83, 6.56, 7.29\r\n        low = 5.1;\r\n        high = 43.8;\r\n        if (val >= low && val <= high && (val % modVal[0] === 0 | val % modVal[1] === 0 | val % modVal[2] === 0 | val % modVal[3] === 0)) return true;\r\n        return false;\r\n    case \"HP%\":\r\n        modVal=[4.1, 4.7, 5.3, 5.8]; //4.08, 4.66, 5.25, 5.83\r\n        low = 4.1;\r\n        high = 35;\r\n        if (val >= low && val <= high && (val % modVal[0] === 0 | val % modVal[1] === 0 | val % modVal[2] === 0 | val % modVal[3] === 0)) return true;\r\n        return false;\r\n    case \"Critical DMG\":\r\n        modVal = [5.4, 6.2, 7, 7.8];// 5.44, 6.22, 6.99, 7.77\r\n        low = 5.4;\r\n        high = 46.8;\r\n        if (val >= low && val <= high && (val % modVal[0] === 0 | val % modVal[1] === 0 | val % modVal[2] === 0 | val % modVal[3] === 0)) return true;\r\n        return false;\r\n    case \"Critical Rate\":\r\n        modVal = [2.7, 3.1, 3.5, 3.9];// 2.72, 3.11, 3.5, 3.89\r\n        low = 2.7;\r\n        high = 23.4;\r\n        if (val >= low && val <= high && (val % modVal[0] === 0 | val % modVal[1] === 0 | val % modVal[2] === 0 | val % modVal[3] === 0)) return true;\r\n        return false;\r\n    default:\r\n        console.log(\"Invalid Entry\");\r\n        return false;\r\n  }\r\n}\r\n\r\nfunction DisplayArtifact({artifact}){\r\n  return(\r\n    <>\r\n    <p>{\"Piece:\"} {artifact.Piece}</p>\r\n    <p>{\"Main:\"} {artifact.MainName} {\"Value:\"} {artifact.MainStat} </p>\r\n    <p>{artifact.SubName1} : {artifact.SubValue1}</p>\r\n    <p>{artifact.SubName2} : {artifact.SubValue2}</p>\r\n    <p>{artifact.SubName3} : {artifact.SubValue3}</p>\r\n    <p>{artifact.SubName4} : {artifact.SubValue4}</p>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction Arrays(){\r\n  const statSelector = {\r\n    artPieces: ['', \"Flower\", \"Feather\", \"Timepiece\", \"Goblet\", \"Circlet\"],\r\n    gobletMain: ['',\"HP%\",\"DEF%\", \"ATK%\", \"Elemental Mastery\", \"Elemental DMG Bonus\"],\r\n    sandMain: ['',\"HP%\", \"DEF%\", \"ATK%\", \"Elemental Mastery\", \"Energy Recharge\"],\r\n    hatMain: ['', \"HP%\", \"DEF%\", \"ATK%\", \"Elemental Mastery\", \"Critical DMG\", \"Critical Rate\", \"Healing Bonus\"],\r\n    substats: ['', \"HP\", \"DEF\", \"ATK\",  \"HP%\", \"DEF%\", \"ATK%\", \"Elemental Mastery\", \"Energy Recharge\", \"Critical DMG\", \"Critical Rate\"],\r\n  }\r\nreturn statSelector;\r\n}\r\n\r\nexport default ArtifactApp;","C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\Projects\\TicTacToe\\TicTacToe.js",[],[],"C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\LearningCourses\\ReactCourse\\ReactCourse.js",[],[],"C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\Projects\\Artifact\\ArtTest.js",["53"],[],"import { useState } from \"react\";\r\n\r\n\r\n\r\nfunction MainApp(){\r\n    const [booking, setBooking] = useState({\r\n        Name: \"\", \r\n        Time:\"\"\r\n    })\r\n    \r\n                                \r\n    function handleNameChange(e){\r\n        if(e.key === 'Enter'){\r\n            setBooking(a => ({...a, Name: e.target.value}))\r\n        }\r\n    }\r\n\r\n    function handleTimeChange(event){\r\n        setBooking(a => ({...a, Time: event.target.value}))\r\n    }\r\n    return(\r\n        <div>\r\n            <p>Listed Booking: {booking.Name}<br/>{booking.Time} </p>\r\n            <input type=\"text\" value={booking.Name} onEnter={handleNameChange}/><br/>\r\n            <input type=\"number\" value={booking.Time} onEnter={handleTimeChange}/>\r\n        </div>);\r\n};\r\n\r\nfunction addBooking(){\r\n    \r\n}\r\n\r\nexport default MainApp;","C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\LearningCourses\\ResponsiveWebDesign\\App.js",["54","55","56","57","58"],[],"\r\nimport { wait } from '@testing-library/user-event/dist/utils';\r\nimport './App.css';\r\nimport { defer } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\n//import './CatPhoto.html';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">      \r\n        <header className='head'>\r\n          <HeaderMenu/>\r\n        </header>\r\n          <div className='desc'>\r\n            <p>These are <i>some</i> of the resources I've been using to try and learn.</p>\r\n            <p>So this div and the code div were stacked because they were both inside of the body tag, so moved it outside and it\r\n            is back to the being beside this desc div. Though I wonder if I change the body tag to have the css property of\r\n            inline I can bring it back?</p>\r\n\r\n            <p>Was using all kinds of silly things to get my code from the freeCodeCamp courses to display like \r\n            {'<xmp></xmp>'} and {'<pre></pre>'} by itself, didn't realise that {'<pre></pre>'} actually only means\r\n            that it pays attention to white space?<br/>However I wasn't able to turn the code into a string but discovered that\r\n            react uses ``{'(Backtick)'} for its multiline strings; Thought my single quotes weren't working and didn't know\r\n            that the backtick was even a character. 24-12-23</p>\r\n\r\n            <p>So I'm trying to work with transition effects but its weird and the smaller I make\r\n              the individual sections the further apart they keep getting, might not even be worth\r\n              the effort so might have to just forget the idea and leave it normal and no fancy effects.\r\n              -01/01/24.\r\n            </p>\r\n            <p>Quick change to push</p>\r\n          </div>\r\n          <div className='codeContainer'>\r\n              <div className='codesec'>\r\n               \r\n                <FccCatPhoto/>\r\n                <iframe className='overl2' src='/StaticHTML/CatPhoto.html' title='CatPhoto' style={{backgroundColor:'white'}}/> \r\n                <button className='overButton' onClick={seeCode}>toggle code/result</button>\r\n              </div>\r\n              <div className='codesec'>\r\n                <Menu/>\r\n                <iframe src='/StaticHTML/Menu.html' width=\"100%\" height=\"600px\" title='Menu'/>\r\n              </div>\r\n              <div className='codesec'>\r\n                <ColorMarkers/>\r\n                <iframe src='/StaticHTML/ColorMarkers.html' width=\"100%\" height=\"600px\" title='ColorMarkers'/>\r\n              </div>\r\n              <div className='codesec'>\r\n                <RegistrationForm/>\r\n                <iframe src='/StaticHTML/RegistrationForm.html' width=\"100%\" height=\"600px\" title='RegoForm'/>\r\n              </div>\r\n              <div className='codesec'>\r\n                <SurveyForm/>\r\n                <iframe src='/StaticHTML/SurveyForm.html' width=\"100%\" height=\"600px\" title='SurveyForm'/>\r\n              </div>\r\n              <div className='codesec'>\r\n                <RothkoPainting/>\r\n                <iframe src='/StaticHTML/RothkoPainting.html' width=\"100%\" height=\"600px\" title='RothkoPainting'/>\r\n              </div>\r\n              <div className='codesec'>\r\n                <PhotoGallery/>\r\n                <iframe src='/StaticHTML/PhotoGallery.html' width=\"100%\" height=\"600px\" title='PhotoGallery'/>\r\n              </div>\r\n              <div className='codesec'>\r\n                <NutritionLabel/>\r\n                <iframe src='/StaticHTML/NutritionLabel.html' width=\"100%\" height=\"600px\" title='NutritionLabel'/>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nfunction HeaderMenu(){\r\n  return(\r\n    <div>\r\n      <a href='https://react.dev' target='_blank' rel='noreferrer'>React site</a>\r\n      {/* <a/>is a hyperlink, target makes it open a new tab, no target uses the current tab */}\r\n      <a href=\"https://youtube.com/watch?v=I2UBjN5ER4s\" target=\"_blank\" rel='noreferrer'>Youtube tutorial</a>\r\n      <a href='https://www.youtube.com/@KevinPowell' target='_blank' rel='noreferrer'>Kevin Powell channel</a>\r\n      <a href='https://www.youtube.com/watch?v=1WIMcknKQPg' target='_blank' rel='noreferrer'>Create Domain</a>\r\n      <a href='https://www.youtube.com/watch?v=zJSY8tbf_ys' target='_blank' rel='noreferrer'>Frontend web development bootcamp</a>\r\n      <a href='https://www.youtube.com/watch?v=bMknfKXIFA8&t=13s' target='_blank' rel='noreferrer'>React Course</a>\r\n    </div>\r\n    )\r\n}\r\n\r\n/*https://blog.logrocket.com/how-create-multilevel-dropdown-menu-react/#multi-level-dropdown-menu-project-setup-react*/\r\nfunction FccCatPhoto(){\r\n  var html = `\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n  <head>\r\n    <meta charset='UTF-8'>\r\n    <title>CatPhotoApp</title>\r\n  </head>\r\n  <body>\r\n    <main>\r\n      <h1>CatPhotoApp</h1>\r\n      <section>\r\n      <h2>Cat Photos</h2>\r\n      <!-- TODO: Add link to cat photos -->\r\n      <p>See more <a target=\"_blank\" href=\"https://freecatphotoapp.com\">cat photos</a> in our gallery.</p>\r\n      <a href=\"https://freecatphotoapp.com\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\r\n      </section>\r\n      <section>\r\n        <h2>Cat Lists</h2>\r\n        <h3>Things cats love:</h3>\r\n        <ul>\r\n          <li>cat nip</li>\r\n          <li>laser pointers</li>\r\n          <li>lasagna</li>\r\n        </ul>\r\n        <figure>\r\n          <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/lasagna.jpg\" alt=\"A slice of lasagna on a plate.\">\r\n          <figcaption>Cats <em>love</em> lasagna.</figcaption>  \r\n        </figure>\r\n        <h3>Top 3 things cats hate:</h3>\r\n        <ol>\r\n          <li>flea treatment</li>\r\n          <li>thunder</li>\r\n          <li>other cats</li>\r\n        </ol>\r\n        <figure>\r\n          <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg\" alt=\"Five cats looking around a field.\">\r\n          <figcaption>Cats <strong>hate</strong> other cats.</figcaption>\r\n        </figure>\r\n      </section>\r\n      <section>\r\n        <h2>Cat Form</h2>\r\n        <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\r\n        <fieldset>\r\n          <legend>Is your cat an indoor or outdoor cat?</legend>\r\n          <label><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\" checked> Indoor</label>\r\n          <label><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label>\r\n        </fieldset>\r\n        <fieldset>\r\n        <legend>What's your cat's personality?</legend>\r\n          <input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\" checked> <label for=\"loving\">Loving</label>\r\n          <input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> <label for=\"lazy\">Lazy</label>\r\n          <input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> <label for=\"energetic\">Energetic</label>\r\n        </fieldset>\r\n          <input type=\"text\" name=\"catphotourl\" placeholder=\"cat photo URL\" required>\r\n        <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </section>\r\n    </main>\r\n    <footer>\r\n      <p>\r\n      No Copyright - <a href=\"https://www.freecodecamp.org\">freeCodeCamp.org</a>\r\n      </p>\r\n    </footer>\r\n  </body>\r\n</html>\r\n  `\r\n  return(\r\n  <>\r\n    <h1>Cat Photo HTML</h1>\r\n    <pre>\r\n      <code>\r\n        <div className={'html overl1'}>\r\n          {html}\r\n        </div>\r\n      </code>\r\n    </pre>\r\n  </>\r\n  );\r\n}\r\n\r\nfunction Menu(){\r\n  var html = `\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"utf-8\" />\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n      <title>Cafe Menu</title>\r\n      <link href=\"styles.css\" rel=\"stylesheet\"/>\r\n    </head>\r\n    <body>\r\n      <div class=\"menu\">\r\n        <main>\r\n          <h1>CAMPER CAFE</h1>\r\n          <p class=\"established\">Est. 2020</p>\r\n          <hr>\r\n          <section>\r\n            <h2>Coffee</h2>\r\n            <img src=\"https://cdn.freecodecamp.org/curriculum/css-cafe/coffee.jpg\" alt=\"coffee icon\"/>\r\n            <article class=\"item\">\r\n              <p class=\"flavor\">French Vanilla</p><p class=\"price\">3.00</p>\r\n            </article>\r\n            <article class=\"item\">\r\n              <p class=\"flavor\">Caramel Macchiato</p><p class=\"price\">3.75</p>\r\n            </article>\r\n            <article class=\"item\">\r\n              <p class=\"flavor\">Pumpkin Spice</p><p class=\"price\">3.50</p>\r\n            </article>\r\n            <article class=\"item\">\r\n              <p class=\"flavor\">Hazelnut</p><p class=\"price\">4.00</p>\r\n            </article>\r\n            <article class=\"item\">\r\n              <p class=\"flavor\">Mocha</p><p class=\"price\">4.50</p>\r\n            </article>\r\n          </section>\r\n          <section>\r\n            <h2>Desserts</h2>\r\n            <img src=\"https://cdn.freecodecamp.org/curriculum/css-cafe/pie.jpg\" alt=\"pie icon\"/>\r\n            <article class=\"item\">\r\n              <p class=\"dessert\">Donut</p><p class=\"price\">1.50</p>\r\n            </article>\r\n            <article class=\"item\">\r\n              <p class=\"dessert\">Cherry Pie</p><p class=\"price\">2.75</p>\r\n            </article>\r\n            <article class=\"item\">\r\n              <p class=\"dessert\">Cheesecake</p><p class=\"price\">3.00</p>\r\n            </article>\r\n            <article class=\"item\">\r\n              <p class=\"dessert\">Cinnamon Roll</p><p class=\"price\">2.50</p>\r\n            </article>\r\n          </section>\r\n        </main>\r\n        <hr class=\"bottom-line\">\r\n        <footer>\r\n          <p>\r\n            <a href=\"https://www.freecodecamp.org\" target=\"_blank\">Visit our website</a>\r\n          </p>\r\n          <p class=\"address\">123 Free Code Camp Drive</p>\r\n        </footer>\r\n      </div>\r\n    </body>\r\n  </html>\r\n  `\r\n  var css = `\r\n      body {\r\n        background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);\r\n        font-family: sans-serif;\r\n        padding: 20px;\r\n      }\r\n\r\n      h1 {\r\n        font-size: 40px;\r\n        margin-top: 0;\r\n        margin-bottom: 15px;\r\n      }\r\n\r\n      h2 {\r\n        font-size: 30px;\r\n      }\r\n\r\n      .established {\r\n        font-style: italic;\r\n      }\r\n\r\n      h1, h2, p {\r\n        text-align: center;\r\n      }\r\n\r\n      .menu {\r\n        width: 80%;\r\n        background-color: burlywood;\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n        padding: 20px;\r\n        max-width: 500px;\r\n      }\r\n\r\n      img {\r\n        display: block;\r\n        margin-top:-25px;\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n      }\r\n\r\n      hr {\r\n        height: 2px;\r\n        background-color: brown;\r\n        border-color: brown;\r\n      }\r\n\r\n      .bottom-line {\r\n        margin-top: 25px;\r\n      }\r\n\r\n      h1, h2 {\r\n        font-family: Impact, serif;\r\n      }\r\n\r\n      .item p {\r\n        display: inline-block;\r\n        margin-top: 5px;\r\n        margin-bottom: 5px;\r\n        font-size: 18px;\r\n      }\r\n\r\n      .flavor, .dessert {\r\n        text-align: left;\r\n        width: 75%;\r\n      }\r\n\r\n      .price {\r\n        text-align: right;\r\n        width: 25%;\r\n      }\r\n\r\n      /* FOOTER */\r\n\r\n      footer {\r\n        font-size: 14px;\r\n      }\r\n\r\n      .address {\r\n        margin-bottom: 5px;\r\n      }\r\n\r\n      a {\r\n        color: black;\r\n      }\r\n\r\n      a:visited {\r\n        color: black;\r\n      }\r\n\r\n      a:hover {\r\n        color: brown;\r\n      }\r\n\r\n      a:active {\r\n        color: brown;\r\n      }\r\n      `\r\n  return(\r\n    <div className='codePair'>\r\n    <div>\r\n    <h1>Menu HTML</h1>\r\n      <pre>\r\n        <code>\r\n          <div className='html'>\r\n            {html}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>\r\n    <div>\r\n    <h1>Menu CSS</h1>\r\n      <pre>\r\n        <code>\r\n          <div className='css'>\r\n            {css}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ColorMarkers(){\r\n  const html = `\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"utf-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <title>Colored Markers</title>\r\n      <link rel=\"stylesheet\" href=\"styles.css\">\r\n    </head>\r\n    <body>\r\n      <h1>CSS Color Markers</h1>\r\n      <div class=\"container\">\r\n        <div class=\"marker red\">\r\n          <div class=\"cap\"></div>\r\n          <div class=\"sleeve\"></div>\r\n        </div>\r\n        <div class=\"marker green\">\r\n          <div class=\"cap\"></div>\r\n          <div class=\"sleeve\"></div>\r\n        </div>\r\n        <div class=\"marker blue\">\r\n          <div class=\"cap\"></div>\r\n          <div class=\"sleeve\"></div>\r\n        </div>\r\n      </div>\r\n    </body>\r\n  </html>\r\n  `\r\n  const css = `\r\n h1 {\r\n  text-align: center;\r\n}\r\n\r\n.container {\r\n  background-color: rgb(255, 255, 255);\r\n  padding: 10px 0;\r\n}\r\n\r\n.marker {\r\n  width: 200px;\r\n  height: 25px;\r\n  margin: 10px auto;\r\n}\r\n\r\n.cap {\r\n  width: 60px;\r\n  height: 25px;\r\n}\r\n\r\n.sleeve {\r\n  width: 110px;\r\n  height: 25px;\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n  border-left: 10px double rgba(0, 0, 0, 0.75);\r\n}\r\n\r\n.cap, .sleeve {\r\n  display: inline-block;\r\n}\r\n\r\n.red {\r\n  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));\r\n  box-shadow: 0 0 20px 0 rgba(83, 14, 14, 0.8);\r\n}\r\n\r\n.green {\r\n  background: linear-gradient(#55680D, #71F53E, #116C31);\r\n  box-shadow: 0 0 20px 0 #3B7E20CC;\r\n}\r\n\r\n.blue {\r\n  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));\r\n  box-shadow: 0 0 20px 0 hsla(223, 59%, 31%, 0.8);\r\n}\r\n`\r\nreturn(\r\n  <div className='codePair'>\r\n    <div>\r\n    <h1>Color Markers HTML</h1>\r\n      <pre>\r\n        <code>\r\n          <div className='html'>\r\n            {html}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>\r\n    <div>\r\n    <h1>Colour Markers CSS</h1>\r\n      <pre>\r\n        <code>\r\n          <div className='css'>\r\n            {css}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>\r\n  </div>\r\n)\r\n}\r\n\r\nfunction RegistrationForm(){\r\n  const html =`\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <title>Registration Form</title>\r\n      <link rel=\"stylesheet\" href=\"styles.css\" />\r\n    </head>\r\n    <body>\r\n      <h1>Registration Form</h1>\r\n      <p>Please fill out this form with the required information</p>\r\n      <form method=\"post\" action='https://register-demo.freecodecamp.org'>\r\n        <fieldset>\r\n          <label for=\"first-name\">Enter Your First Name: <input id=\"first-name\" name=\"first-name\" type=\"text\" required /></label>\r\n          <label for=\"last-name\">Enter Your Last Name: <input id=\"last-name\" name=\"last-name\" type=\"text\" required /></label>\r\n          <label for=\"email\">Enter Your Email: <input id=\"email\" name=\"email\" type=\"email\" required /></label>\r\n          <label for=\"new-password\">Create a New Password: <input id=\"new-password\" name=\"new-password\" type=\"password\" pattern=\"[a-z0-5]{8,}\" required /></label>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Account type (required)</legend>\r\n          <label for=\"personal-account\"><input id=\"personal-account\" type=\"radio\" name=\"account-type\" class=\"inline\" checked /> Personal</label>\r\n          <label for=\"business-account\"><input id=\"business-account\" type=\"radio\" name=\"account-type\" class=\"inline\" /> Business</label>\r\n        </fieldset>\r\n        <fieldset>\r\n          <label for=\"profile-picture\">Upload a profile picture: <input id=\"profile-picture\" type=\"file\" name=\"file\" /></label>\r\n          <label for=\"age\">Input your age (years): <input id=\"age\" type=\"number\" name=\"age\" min=\"13\" max=\"120\" /></label>\r\n          <label for=\"referrer\">How did you hear about us?\r\n            <select id=\"referrer\" name=\"referrer\">\r\n              <option value=\"\">(select one)</option>\r\n              <option value=\"1\">freeCodeCamp News</option>\r\n              <option value=\"2\">freeCodeCamp YouTube Channel</option>\r\n              <option value=\"3\">freeCodeCamp Forum</option>\r\n              <option value=\"4\">Other</option>\r\n            </select>\r\n          </label>\r\n          <label for=\"bio\">Provide a bio:\r\n            <textarea id=\"bio\" name=\"bio\" rows=\"3\" cols=\"30\" placeholder=\"I like coding on the beach...\"></textarea>\r\n          </label>\r\n        </fieldset>\r\n        <label for=\"terms-and-conditions\">\r\n          <input class=\"inline\" id=\"terms-and-conditions\" type=\"checkbox\" required name=\"terms-and-conditions\" /> I accept the <a href=\"https://www.freecodecamp.org/news/terms-of-service/\">terms and conditions</a>\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    </body>\r\n  </html>\r\n  `\r\n  const css = `\r\n  body {\r\n    width: 100%;\r\n    height: 100vh;\r\n    margin: 0;\r\n    background-color: #1b1b32;\r\n    color: #f5f6f7;\r\n    font-family: Tahoma;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  h1, p {\r\n    margin: 1em auto;\r\n    text-align: center;\r\n  }\r\n  \r\n  form {\r\n    width: 60vw;\r\n    max-width: 500px;\r\n    min-width: 300px;\r\n    margin: 0 auto;\r\n    padding-bottom: 2em;\r\n  }\r\n  \r\n  fieldset {\r\n    border: none;\r\n    padding: 2rem 0;\r\n    border-bottom: 3px solid #3b3b4f;\r\n  }\r\n  \r\n  fieldset:last-of-type {\r\n    border-bottom: none;\r\n  }\r\n  \r\n  label {\r\n    display: block;\r\n    margin: 0.5rem 0;\r\n  }\r\n  \r\n  input,\r\n  textarea,\r\n  select {\r\n    margin: 10px 0 0 0;\r\n    width: 100%;\r\n    min-height: 2em;\r\n  }\r\n  \r\n  input, textarea {\r\n    background-color: #0a0a23;\r\n    border: 1px solid #0a0a23;\r\n    color: #ffffff;\r\n  }\r\n  \r\n  .inline {\r\n    width: unset;\r\n    margin: 0 0.5em 0 0;\r\n    vertical-align: middle;\r\n  }\r\n  \r\n  input[type=\"submit\"] {\r\n    display: block;\r\n    width: 60%;\r\n    margin: 1em auto;\r\n    height: 2em;\r\n    font-size: 1.1rem;\r\n    background-color: #3b3b4f;\r\n    border-color: white;\r\n    min-width: 300px;\r\n  }\r\n  \r\n  input[type=\"file\"] {\r\n    padding: 1px 2px;\r\n  }\r\n  \r\n  .inline{\r\n    display: inline; \r\n  }\r\n  \r\n  a{\r\n    color: #dfdfe2;\r\n  }\r\n  `\r\n  return(\r\n  <div className='codePair'>\r\n  <div>\r\n    <h1>Registration Form HTML</h1>\r\n      <pre>\r\n        <code>\r\n          <div className='html'>\r\n            {html}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>\r\n    <div>\r\n    <h1>Registration Form CSS</h1>\r\n      <pre>\r\n        <code>\r\n          <div className='css'>\r\n            {css}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>  \r\n  </div>\r\n  )\r\n}\r\n\r\nfunction SurveyForm(){\r\n  const html =`\r\n  <!DOCTYPE html>\r\n  <link rel=\"stylesheet\" href=\"styles.css\">\r\n  <h1 id='title'>TITLE</h1>\r\n  <p id='description'>Paragraph</p>\r\n  <form id='survey-form'>\r\n    <label id='name-label' for='name'>Name: <input required id='name' type='text' placeholder='Please enter name'</label>\r\n    <label id='email-label' for='email'>Email: <input required id='email' type='email' placeholder='Enter email'></label>\r\n    <label id='number-label' for='number'>Number: <input id='number' type='number' pattern='[0-9]' min='4' max='8' placeholder='Enter number'></label>\r\n    <select id='dropdown'>\r\n      <option>1</option>\r\n      <option>2</option>\r\n    </select>\r\n    <input name='radio' type=\"radio\" value='1'>\r\n    <input name='radio' type=\"radio\" value='2'>\r\n    <input type='checkbox' value='1'>\r\n    <input type='checkbox' value='2'>\r\n    <textarea placeholder='Additional comments'></textarea>\r\n    <input id='submit' type='submit'>\r\n  <form>\r\n  `\r\n  return(\r\n    <div>\r\n    <h1>Survey Form HTML</h1>\r\n      <pre>\r\n        <code>\r\n          <div className='html'>\r\n            {html}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction RothkoPainting(){\r\n  const html = `\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <title>Rothko Painting</title>\r\n      <link href=\"./styles.css\" rel=\"stylesheet\">\r\n    </head>\r\n    <body>\r\n      <div class=\"frame\">\r\n        <div class=\"canvas\">\r\n          <div class=\"one\"></div>\r\n          <div class=\"two\"></div>\r\n          <div class=\"three\"></div>\r\n        </div>\r\n      </div>\r\n    </body>\r\n  </html>\r\n  `\r\n  const css = `\r\n  .canvas {\r\n    width: 500px;\r\n    height: 600px;\r\n    background-color: #4d0f00;\r\n    overflow: hidden;\r\n    filter: blur(2px);\r\n  }\r\n  \r\n  .frame {\r\n    border: 50px solid black;\r\n    width: 500px;\r\n    padding: 50px;\r\n    margin: 20px auto;\r\n  }\r\n  \r\n  .one {\r\n    width: 425px;\r\n    height: 150px;\r\n    background-color: #efb762;\r\n    margin: 20px auto;\r\n    box-shadow: 0 0 3px 3px #efb762;\r\n    border-radius: 9px;\r\n    transform: rotate(-0.6deg);\r\n  }\r\n  \r\n  .two {\r\n    width: 475px;\r\n    height: 200px;\r\n    background-color: #8f0401;\r\n    margin: 0 auto 20px;\r\n    box-shadow: 0 0 3px 3px #8f0401;\r\n    border-radius: 8px 10px;\r\n    transform: rotate(0.4deg);\r\n  }\r\n  \r\n  .one, .two {\r\n    filter: blur(1px);\r\n  }\r\n  \r\n  .three {\r\n    width: 91%;\r\n    height: 28%;\r\n    background-color: #b20403;\r\n    margin: auto;\r\n    filter: blur(2px);\r\n    box-shadow: 0 0 5px 5px #b20403;\r\n    border-radius: 30px 25px 60px 12px;\r\n    transform: rotate(-0.2deg)\r\n  }\r\n  `\r\n  return(\r\n    <div className='codePair'>\r\n      <div>\r\n      <h1>Rothko Painting HTML</h1>\r\n        <pre>\r\n          <code>\r\n            <div className='html'>\r\n              {html}\r\n            </div>\r\n          </code>\r\n        </pre>\r\n      </div>\r\n      <div>\r\n    <h1>Rothko Painting CSS</h1>\r\n      <pre>\r\n        <code>\r\n          <div className='css'>\r\n            {css}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction PhotoGallery(){\r\n  const html = `\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"utf-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <title>Photo Gallery</title>\r\n      <link rel=\"stylesheet\" href=\"./styles.css\">\r\n    </head>\r\n    <body>\r\n      <header class=\"header\">\r\n        <h1>css flexbox photo gallery</h1>\r\n      </header>\r\n      <div class=\"gallery\">\r\n        <img src=\"https://cdn.freecodecamp.org/curriculum/css-photo-gallery/1.jpg\" alt='Sleeping Cat'>\r\n        <img src=\"https://cdn.freecodecamp.org/curriculum/css-photo-gallery/2.jpg\" alt='Playful Kitten'>\r\n        <img src=\"https://cdn.freecodecamp.org/curriculum/css-photo-gallery/3.jpg\" alt='Grumpy Cat'>\r\n        <img src=\"https://cdn.freecodecamp.org/curriculum/css-photo-gallery/4.jpg\" alt='Cat under blanket'>\r\n        <img src=\"https://cdn.freecodecamp.org/curriculum/css-photo-gallery/5.jpg\" alt='White Kitten with Blue eyes'>\r\n        <img src=\"https://cdn.freecodecamp.org/curriculum/css-photo-gallery/6.jpg\" alt='Two kittens'>\r\n        <img src=\"https://cdn.freecodecamp.org/curriculum/css-photo-gallery/7.jpg\" alt='Curious cat under a blanket'>\r\n        <img src=\"https://cdn.freecodecamp.org/curriculum/css-photo-gallery/8.jpg\" alt='Curious Tabby Cat'>\r\n        <img src=\"https://cdn.freecodecamp.org/curriculum/css-photo-gallery/9.jpg\" alt='Two resting cats'>\r\n      </div>\r\n    </body>\r\n  </html>\r\n`\r\nconst css =`\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  font-family: sans-serif;\r\n  background: #f5f6f7;\r\n}\r\n\r\n.header {\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  padding: 32px;\r\n  background-color: #0a0a23;\r\n  color: #fff;\r\n  border-bottom: 4px solid #fdb347;\r\n}\r\n\r\n.gallery {\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 16px;\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n  padding: 20px 10px;\r\n}\r\n\r\n.gallery img {\r\n  width: 100%;\r\n  max-width: 350px;\r\n  height: 300px;\r\n  object-fit: cover;\r\n  border-radius: 10px;\r\n}\r\n\r\n.gallery::after {\r\n  content: \"\";\r\n  width: 350px;\r\n}\r\n`\r\nreturn(\r\n  <div className='codePair'>\r\n    <div>\r\n    <h1>Photo Gallery HTML</h1>\r\n      <pre>\r\n        <code>\r\n          <div className='html'>\r\n            {html}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>\r\n    <div>\r\n    <h1>Photo Gallery CSS</h1>\r\n      <pre>\r\n        <code>\r\n          <div className='css'>\r\n            {css}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>\r\n  </div>\r\n)\r\n}\r\n\r\nfunction NutritionLabel(){\r\n  const html =`\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Nutrition Label</title>\r\n    <link href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,700,800\" rel=\"stylesheet\">\r\n    <link href=\"./styles.css\" rel=\"stylesheet\">\r\n  </head>\r\n\r\n  <body>\r\n    <div class=\"label\">\r\n      <header>\r\n        <h1 class=\"bold\">Nutrition Facts</h1>\r\n        <div class=\"divider\"></div>\r\n        <p>8 servings per container</p>\r\n        <p class=\"bold\">Serving size <span>2/3 cup (55g)</span></p>\r\n      </header>\r\n      <div class=\"divider large\"></div>\r\n      <div class=\"calories-info\">\r\n        <div class=\"left-container\">\r\n          <h2 class=\"bold small-text\">Amount per serving</h2>\r\n          <p>Calories</p>\r\n        </div>\r\n        <span>230</span>\r\n      </div>\r\n      <div class=\"divider medium\"></div>\r\n      <div class=\"daily-value small-text\">\r\n        <p class=\"bold right no-divider\">% Daily Value *</p>\r\n        <div class=\"divider\"></div>\r\n        <p><span><span class=\"bold\">Total Fat</span> 8g</span> <span class=\"bold\">10%</span></p>\r\n        <p class=\"indent no-divider\">Saturated Fat 1g <span class=\"bold\">5%</span></p>\r\n        <div class=\"divider\"></div>\r\n        <p class=\"indent no-divider\"><span><i>Trans</i> Fat 0g</span></p>\r\n        <div class=\"divider\"></div>\r\n        <p><span><span class=\"bold\">Cholesterol</span> 0mg</span> <span class=\"bold\">0%</span></p>\r\n        <p><span><span class=\"bold\">Sodium</span> 160mg</span> <span class=\"bold\">7%</span></p>\r\n        <p><span><span class=\"bold\">Total Carbohydrate</span> 37g</span> <span class=\"bold\">13%</span></p>\r\n        <p class=\"indent no-divider\">Dietary Fiber 4g</p>\r\n        <div class=\"divider\"></div>\r\n        <p class=\"indent no-divider\">Total Sugars 12g</p>\r\n        <div class=\"divider double-indent\"></div>\r\n        <p class=\"double-indent no-divider\">Includes 10g Added Sugars <span class=\"bold\">20%</span></p>\r\n        <div class=\"divider\"></div>\r\n        <p class=\"no-divider\"><span class=\"bold\">Protein</span> 3g</p>\r\n        <div class=\"divider large\"></div>\r\n        <p>Vitamin D 2mcg <span>10%</span></p>\r\n        <p>Calcium 260mg <span>20%</span></p>\r\n        <p>Iron 8mg <span>45%</span></p>\r\n        <p class=\"no-divider\">Potassium 235mg <span>6%</span></p>\r\n      </div>\r\n      <div class=\"divider medium\"></div>\r\n      <p class=\"note\">* The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily\r\n        diet. 2,000 calories a day is used for general nutrition advice.</p>\r\n    </div>\r\n  </body>\r\n  </html>\r\n`\r\n  const css =`\r\n  * {\r\n  box-sizing: border-box;\r\n  }\r\n\r\n  html {\r\n    font-size: 16px;\r\n  }\r\n\r\n  body {\r\n    font-family: 'Open Sans', sans-serif;\r\n  }\r\n\r\n  .label {\r\n    border: 2px solid black;\r\n    width: 270px;\r\n    margin: 20px auto;\r\n    padding: 0 7px;\r\n  }\r\n\r\n  header h1 {\r\n    text-align: center;\r\n    margin: -4px 0;\r\n    letter-spacing: 0.15px\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .divider {\r\n    border-bottom: 1px solid #888989;\r\n    margin: 2px 0;\r\n  }\r\n\r\n  .bold {\r\n    font-weight: 800;\r\n  }\r\n\r\n  .large {\r\n    height: 10px;\r\n  }\r\n\r\n  .large, .medium {\r\n    background-color: black;\r\n    border: 0;\r\n  }\r\n\r\n  .medium {\r\n    height: 5px;\r\n  }\r\n\r\n  .small-text {\r\n    font-size: 0.85rem;\r\n  }\r\n\r\n\r\n  .calories-info {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n  }\r\n\r\n  .calories-info h2 {\r\n    margin: 0;\r\n  }\r\n\r\n  .left-container p {\r\n    margin: -5px -2px;\r\n    font-size: 2em;\r\n    font-weight: 700;\r\n  }\r\n\r\n  .calories-info span {\r\n    margin: -7px -2px;\r\n    font-size: 2.4em;\r\n    font-weight: 700;\r\n  }\r\n\r\n  .right {\r\n    justify-content: flex-end;\r\n  }\r\n\r\n  .indent {\r\n    margin-left: 1em;\r\n  }\r\n\r\n  .double-indent {\r\n    margin-left: 2em;\r\n  }\r\n\r\n  .daily-value p:not(.no-divider) {\r\n    border-bottom: 1px solid #888989;\r\n  }\r\n\r\n  .note {\r\n    font-size: 0.6rem;\r\n    margin: 5px 0;\r\n    padding: 0px 8px;\r\n    text-indent: -8px;\r\n  }\r\n`\r\nreturn(\r\n  <div className='codePair'>\r\n    <div>\r\n    <h1>Nutrition Label HTML</h1>\r\n      <pre>\r\n        <code>\r\n          <div className='html'>\r\n            {html}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>\r\n    <div>\r\n    <h1>Nutrition Label CSS</h1>\r\n      <pre>\r\n        <code>\r\n          <div className='css'>\r\n            {css}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div>\r\n  </div>\r\n)\r\n}\r\n\r\n// window.onload = function () {\r\n//   // This runs when the page has loaded, ensuring elements are available in the DOM\r\n\r\n//   // Get references to the button and the elements\r\n//   let overl1 = document.querySelector('.overl1');\r\n//   let overl2 = document.querySelector('.overl2');\r\n//   let button = document.querySelector('.overButton');\r\n\r\n//   // Check if the elements are found before adding an event listener\r\n//   if (overl1 && overl2 && button) {\r\n//     button.addEventListener('click', seeCode);\r\n//   }\r\n// };\r\n\r\n\r\nfunction seeCode(){\r\n  let overl1 = (document.querySelector('.overl1'));\r\n  let overl2 = (document.querySelector('.overl2'));\r\n  \r\n\r\n  // if(overl1.style.zIndex === '1'){\r\n  //  overl1.style.zIndex = '2'; \r\n  //  overl2.style.zIndex = '1';\r\n    \r\n  // }else{\r\n  //   overl1.style.zIndex = '1';\r\n  //   overl2.style.zIndex = '2';\r\n  //   }\r\n  // }\r\n\r\n  if(overl2.style.width === '0%'){\r\n    overl1.style.width = '0%';\r\n    overl1.style.height = '0%';\r\n    // overl1.style.zIndex = '2';\r\n  \r\n    overl2.style.width = '100%';\r\n    overl2.style.height = '100%';\r\n    // overl2.style.zIndex = '1';\r\n\r\n   \r\n  }else{\r\n    overl2.style.width = '0%';\r\n    overl2.style.height = '0%';\r\n    // overl2.style.zIndex = '2'\r\n\r\n    overl1.style.width = '100%';\r\n    overl1.style.height = '100%';\r\n    // overl1.style.zIndex = '1';\r\n  }\r\n}\r\n\r\n//template:\r\n{/* <div className='codesec'>\r\n\r\n</div> */}\r\n{/* <div>\r\n    <h1></h1>\r\n      <pre>\r\n        <code>\r\n          <div className=''>\r\n            {}\r\n          </div>\r\n        </code>\r\n      </pre>\r\n    </div> */}\r\n\r\n\r\n// {/* <div>\r\n//     <iframe src='https://www.youtube.com/watch?v=1WIMcknKQPg'>\r\n//     </iframe>\r\n//     </div> */}\r\n\r\n// function InputValidation(uinput, arr) //isNaN = Is not a number| The drop down box invalidates this\r\n// {\r\n//     let valid = parseInt(uinput); // checks to make sure the user has entrered an interger. \r\n//     return (isNaN(valid) || uinput > arr.Length || uinput <= 0) ? false : true;\r\n// } \r\n// function StringInputBox({onEnter}) {\r\n//   const [inputVal, setInputVal] = useState('')\r\n//   const handleKey = (event) => {\r\n//     if(event.key === \"Enter\"){\r\n//       onEnter(inputVal)\r\n//       setInputVal('');\r\n//     }\r\n//   };\r\n//   return (<input type=\"text\"\r\n//   value={inputVal}\r\n//   onChange={(event) => setInputVal(event.target.value)}\r\n//   onKeyDown={handleKey}\r\n//   />\r\n// );\r\n// }\r\n\r\n//Original kind of working idea\r\n// function UInputBox1({value}) {\r\n//   const [inputVal, setInputVal] = useState('');\r\n//   const [displayVal, setDisplayVal] = useState('');\r\n//   const handleKey = (event) => {\r\n//     if(event.key === \"Enter\"){\r\n//       setDisplayVal(inputVal);\r\n//       setInputVal('');\r\n//     }\r\n//   };\r\n//   return (\r\n//     <div className='container'>\r\n//     <input type=\"text\"\r\n//     value={inputVal}\r\n//     onChange={(event) => setInputVal(event.target.value)}\r\n//     onKeyDown={handleKey}\r\n//     />\r\n//     <p>{value}: {displayVal}</p>\r\n//     </div>);\r\n// }\r\n//#endregion\r\nexport default App;\r\n","C:\\Users\\jason\\React\\my-react-app\\Client\\src\\Pages\\Projects\\YGOReplays&Images\\ReplayImages.js",["59"],[],"import './ReplayImages.css';\r\nimport Modal from 'react-modal';\r\nimport { useState } from 'react';\r\n\r\n/*\r\nJust want this to be able to display my replays and screenshots in an appealing way for practice. \r\nSimple layout practice for different media.\r\n*/\r\n\r\nfunction ReplayImages(){\r\n\r\n    const videoUrls = [\r\n        '/Videos/ShaddollDespia_VS_Lyrilcus.mp4',\r\n        '/Videos/Altergeist_VS_Dragonmaid.mp4'\r\n    ]\r\n\r\n    const imageUrls = [\r\n        '/Images/Decklist_Altergeist.png',\r\n        '/Images/Decklist_Branded_Bystial.png',\r\n        '/Images/Decklist_Dogmatika.png',\r\n        '/Images/Decklist_Floowandereeze.png',\r\n        '/Images/Decklist_Ghostrick.png',\r\n        '/Images/Decklist_Labryth.png',\r\n        '/Images/Decklist_LiveTwin.png',\r\n        '/Images/Decklist_Mathmech.png',\r\n        '/Images/Decklist_Mikanko.png',\r\n        '/Images/Decklist_NaturiaRunick.png',\r\n        '/Images/Decklist_Prankids.png',\r\n        '/Images/Decklist_Prediction_Princess.png',\r\n        '/Images/Decklist_PUNKash.png',\r\n        '/Images/Decklist_PUNKBystial.png',\r\n        '/Images/Decklist_Rikka.png',\r\n        '/Images/Decklist_ShaddollPerformage.png',\r\n        '/Images/Decklist_Solfachord.png',\r\n        '/Images/Decklist_SprightLiveTwin.png',\r\n        '/Images/Decklist_SprightMelffy.png',\r\n        '/Images/Decklist_Sunavalon.png',\r\n        '/Images/Decklist_SushipMagikey.png',\r\n        '/Images/Decklist_Sylvan.png',\r\n        '/Images/Decklist_WeatherPainters.png',\r\n        '/Images/Festival_Synchro.png',\r\n        '/Images/Festival_FusionXyz.png'\r\n    ];\r\n\r\n    const [currentImgIndex, setCurrentImgIndex] = useState(0);\r\n    const [clickedImage, setClickedImage] = useState('');\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const openModal = (image) => {\r\n        setClickedImage(image)\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const previousImg = () => {\r\n        if (currentImgIndex > 0) {\r\n        setCurrentImgIndex(currentImgIndex - 10);\r\n        }\r\n    };\r\n    const nextImg = () => {\r\n        if (currentImgIndex < imageUrls.length - 1) {\r\n        setCurrentImgIndex(currentImgIndex + 10);\r\n        }\r\n    };\r\n\r\n    const [currentVidIndex, setCurrentVidIndex] = useState(0);\r\n    const previousVid = () => {\r\n        if (currentVidIndex > 0) {\r\n        setCurrentVidIndex(currentVidIndex - 1);\r\n        console.log(\"video should change to\" )\r\n        }\r\n    };\r\n    const nextVid = () => {\r\n        if (currentVidIndex < videoUrls.length - 1) {\r\n        setCurrentVidIndex(currentVidIndex + 1);\r\n        }\r\n    };\r\n\r\n    \r\n    const videoUrl = videoUrls[currentVidIndex];\r\n\r\n    return(\r\n        <body className=\"container\">\r\n            <div className='videoGallery'>\r\n                <button className='btn leftarrow' onClick={previousVid} disabled={currentVidIndex === 0}/>\r\n                <video src={videoUrl} controls>\r\n                    <source src={videoUrl} type='video/mp4'/>\r\n                </video>\r\n                <button className='btn rightarrow' onClick={nextVid} disabled={currentVidIndex === videoUrls.length - 1}/>\r\n            </div>\r\n\r\n            <div className=\"imageGallery\">\r\n                <button className='btn leftarrow' onClick={previousImg} disabled={currentImgIndex === 0}/>\r\n                {imageUrls.slice(currentImgIndex, currentImgIndex+10).map((image, index) => (\r\n                    <img\r\n                    key={index}\r\n                    src={image}\r\n                    onClick={() => openModal(image)}\r\n                    alt={'Yugioh Decklist ${index +1}'}\r\n                    />))\r\n                };\r\n                <button className='btn rightarrow' onClick={nextImg} disabled={currentImgIndex >= imageUrls.length - 10}/>\r\n            </div>\r\n            \r\n            <Modal className=\"modal\" isOpen={isModalOpen} onRequestClose={closeModal} ContentLabel=\"Image Modal\" >\r\n                <img src={clickedImage} alt=\"Yugioh Decklist\" onClick={closeModal}/>\r\n            </Modal>\r\n\r\n        </body>\r\n    )\r\n}\r\n\r\nexport default ReplayImages;\r\n",{"ruleId":"60","severity":1,"message":"61","line":457,"column":10,"nodeType":"62","messageId":"63","endLine":457,"endColumn":28},{"ruleId":"60","severity":1,"message":"64","line":458,"column":7,"nodeType":"62","messageId":"63","endLine":458,"endColumn":12},{"ruleId":"60","severity":1,"message":"65","line":29,"column":10,"nodeType":"62","messageId":"63","endLine":29,"endColumn":20},{"ruleId":"60","severity":1,"message":"66","line":2,"column":10,"nodeType":"62","messageId":"63","endLine":2,"endColumn":14},{"ruleId":"60","severity":1,"message":"67","line":4,"column":10,"nodeType":"62","messageId":"63","endLine":4,"endColumn":15},{"ruleId":"60","severity":1,"message":"68","line":5,"column":10,"nodeType":"62","messageId":"63","endLine":5,"endColumn":19},{"ruleId":"69","severity":1,"message":"70","line":1088,"column":1,"nodeType":"71","messageId":"72","endLine":1090,"endColumn":11},{"ruleId":"69","severity":1,"message":"70","line":1091,"column":1,"nodeType":"71","messageId":"72","endLine":1100,"endColumn":15},{"ruleId":"73","severity":1,"message":"74","line":102,"column":26,"nodeType":"75","messageId":"76","endLine":102,"endColumn":55},"no-unused-vars","'LoadedArtifactMenu' is defined but never used.","Identifier","unusedVar","'items' is assigned a value but never used.","'addBooking' is defined but never used.","'wait' is defined but never used.","'defer' is defined but never used.","'useEffect' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression"]