/*I'm removing this code as it seems redundant 04/11/23:
  <PieceDisplay value={piece} main={mainStat} mainVal={mainValue}/>
  <DisplayNameValue name={selectedStat1} value={statValue1}/>
  <DisplayNameValue name={selectedStat2} value={statValue2}/>
  <DisplayNameValue name={selectedStat3} value={statValue3}/>
  <DisplayNameValue name={selectedStat4} value={statValue4}/>
  <IntegerInputBox selectedStat={mainValue} onEnter={handleMainValue}/>
  {piece !== '' && mainStat !== '' && mainValue !== '' && selectedStat1 !== '' && selectedStat2 !== '' && selectedStat3 !== '' &&
*/

/* Combined the below commented code into the DisplayArtifact function.
// function PieceDisplay({value, main, mainVal}){
//   return(
//     <>
//     <p>{"Piece:"} {value}</p>
//     <p>{"Main:"} {main} {"Value:"} {mainVal}</p>
//     </>
//   )
// }
// function DisplayNameValue({name, value}){
//   return(
//     <p>{name} : {value}</p>
//   )
// }
*/

/* I'm removing the below commented code as it seems redundant: 04/11/2023
// const [pieceVal, setPieceVal] = useState('')
// setPieceVal(passThisValue)
// value={pieceVal || ''}
// const passThisValue=event.target.value
// onChange(passThisValue)
*/
// function PieceStringDropMenu({onChange, useArray}) {
//   const array = useArray.map((stat) => (
//     <option key={stat} value={stat}>{stat}</option>));
//   const handleMenu = (event) => {
//     onChange(event.target.value)
//   }
//   return (
//   <select onChange={handleMenu}>
//     {array}
//   </select>
// );
// }
/* I'm removing the below commented code as it seems redundant: 04/11/2023
// const [StrVal, setStrVal] = useState('');
// setStrVal(passThisValue) value={StrVal || ''}
//const passThisValue=event.target.value
//onChange(passThisValue)
---This is the old version of the same code but not sure what's easier to understand, assigning stuff to variables, making code longer
---but more readable (maybe?) or the below code which is more concise. 05/11/2023 
// function MainStringDropMenu({onChange, useArray}) {
//   const array = useArray.map((stat) => (
//     <option key={stat} value={stat}>{stat}</option>));
//   const handleMenu = (event) => {
//     onChange(event.target.value)
//   }
//   return (
//     <select onChange={handleMenu}> 
//       {array}
//     </select>
//   );
// }
*/
/* I'm removing the below commented code as it seems redundant: 04/11/2023
// value={StrVal || ''}
// const [StrVal, setStrVal] = useState('')
// const passThisValue=event.target.value
// setStrVal(passThisValue);
// setStrVal('');
// console.log(StrVal)
---Old version
// function SubStringDropMenu({onChange, main, sub1, sub2, sub3, sub4, useArray}) {
//   const array = useArray.map((stat) => (
//     <option key={stat} value={stat}>{stat}</option>));
//   const handleMenu = (event) => {
//   if(selectionValidation(event.target.value, main, sub1, sub2, sub3, sub4)){
//     onChange(event.target.value);
//   }
//   else{
//     alert("IMPOSSIBLE");
//     event.target.value = '';
//   }
//   }
//   return (
//   <select onChange={handleMenu}>
//     {array}
//   </select>
// );
// }
*/

// function CreateSub(ms, array){
//   const [subName, setSubName] = useState('');
//   const handleSubName = (value) => {setSubName(value)};

//   const [statValue, setStatValue] = useState('');
//   const handleStatValue = (input) => {setStatValue(input)};

//   const substat={
//     Name: subName,
//     Value: statValue
//   };
//   if(substat.Name !== '' && substat.Value !== ''){
//     return substat;
//   };
// }

// function IntegerInputBox({onEnter, selectedStat}) {
//   const [inputVal, setInputVal] = useState('');
//   const handleKey = (event) => {
//     if(event.key === "Enter"){
//       if(selectedStat){
//       let valid = ValidSubStatValues(inputVal, selectedStat)
//       if (valid){
//         onEnter(inputVal)
//         setInputVal(inputVal);
//       }
//       else{
//         alert('nah m8');
//         setInputVal('');
//       }
//     }
//     else{
//     alert('bad');
//     setInputVal('');
//   }
//   }
//   };
//   return (
//     <>
//     {/* <StringDropMenu onChange={setSelectedStat}/> */}
//     <input type="text"
//     value={inputVal}
//     onChange={(event) => setInputVal(event.target.value)}
//     onKeyDown={handleKey}
//     />
//     </>
//   );
// }

/* <option value={null}></option>
    <option value="Elemental Mastery">Elemental Mastery</option>
    <option value="Critical DMG">Crit DMG</option>
    <option value="Critical Rate">Crit Rate</option>
    <option value="ATK%">ATK %</option>
    <option value="DEF%">DEF %</option>
    <option value="HP%">HP %</option>
    <option value="Energy Recharge">Energy Recharge</option> 
    
    <option value="0"></option>
    <option value="Flower">Flower</option>
    <option value="Feather">Feather</option>
    <option value="Timepiece">Timepiece</option>
    <option value="Goblet">Goblet</option>
    <option value="Circlet">Circlet</option>
    
*/

function DropMenu({onChange, useArray, reset}) {
//   useEffect(() => {
//     if (reset) {
//       onChange(useArray[0]);
//       console.log(reset)
//     }
//   }, [reset, onChange]);

//   return ( //if piece is !'' > Clear Object?
//     <select onChange={(event) => onChange(event.target.value)}>
//       {useArray.map((stat) => (
//         <option key={stat} value={stat}>{stat}</option>))}
//     </select>
//   );
// }

// function MainStringDropMenu({onChange, useArray}) {
//   return (
//     <select onChange={(event) => {onChange(event.target.value)}}> 
//       {useArray.map((stat) => (
//         <option key={stat} value={stat}>{stat}</option>))}
//     </select>
//   );
// }

Old conditional rendering version of my mainstat and values dropdown menus - Made a function for it instead.
{/* {piece === "Timepiece" && (
              <DropMenu piece={piece} onChange={handleMainSelection} useArray={statArrays.sandMain} reset={reset} load={loaded} data={data.Piece} />
            )}
            {piece === "Goblet" && (
              <DropMenu piece={piece} onChange={handleMainSelection} useArray={statArrays.gobletMain} reset={reset} load={loaded} data={data.Piece}/>
            )}
            {piece === "Circlet" && (
              <DropMenu piece={piece} onChange={handleMainSelection} useArray={statArrays.hatMain} reset={reset} load={loaded} data={data.Piece}/>
            )} */}


// function Piece(statArrays){
//   const [piece, setPiece] = useState('')
//   const handlePieceSelection = (value) => {setPiece(value)}
//   return(
//     <>
//     <label for='piece'>Enter piece: 
//       <PieceStringDropMenu id='piece' onChange={handlePieceSelection} useArray={statArrays.artPieces}/>
//     </label>
//     <Main piece={piece}/>
//     <ObjectCreate p={piece}/>
//     </>
//   )
// }

//Use effect for the new object thing
  // const [piece, setPiece] = useState();
  // const handlePieceSelection = (value) => {setPiece(value)};

  // const [mainStat, setMainStat] = useState();
  // const handleMainSelection = (value) => (setMainStat(value));
  // useEffect(() => {MainStat(piece);}, [piece]); 
  // const [mainValue, setMainValue] = useState('');
  // useEffect(() => {MainValue(mainStat)}, [mainStat]); 
// const [selectedStat1, setSelectedStat1] = useState(''); //the value of the drop down box.
  // const handleSelectedStat1 = (value) => {setSelectedStat1(value)};
  // const [statValue1, setStatValue1] = useState(''); //This works currently, displays correct values
  // const handleStatValue1 = (input) => { setStatValue1(input)};

  // const [selectedStat2, setSelectedStat2] = useState('');
  // const handleSelectedStat2 = (value) => {setSelectedStat2(value)};
  // const [statValue2, setStatValue2] = useState('');
  // const handleStatValue2 = (input) => { setStatValue2(input)};

  // const [selectedStat3, setSelectedStat3] = useState('');
  // const handleSelectedStat3 = (value) => {setSelectedStat3(value)};
  // const [statValue3, setStatValue3] = useState('');
  // const handleStatValue3 = (input) => { setStatValue3(input)};

  // const [selectedStat4, setSelectedStat4] = useState('');
  // const handleSelectedStat4 = (value) => {setSelectedStat4(value)};
  // const [statValue4, setStatValue4] = useState('');
  // const handleStatValue4 = (input) => {setStatValue4(input)};

  // useEffect(() => {
  //   if (reset) {
  //   setPiece('');
  //   setMainValue('');
  //   setMainStat('');
  //   setSelectedStat1('');
  //   setStatValue1('');
  //   setSelectedStat2('');
  //   setStatValue2('');
  //   setSelectedStat3('');
  //   setStatValue3('');
  //   setSelectedStat4('');
  //   setStatValue4('');
  //   setReset(false);
  //   console.log(reset);
  //   }
  // }, [reset]);

/*Created to more easily display and potentially save and load artifacts when I make those functions.*/
// function ObjectCreate(p, mn, ms, sn1, sv1, sn2, sv2, sn3, sv3, sn4, sv4){
//   const artifact = {
//     Piece: p, 
//     MainName: mn,
//     MainStat: ms,
//     SubName1: sn1,
//     SubValue1: sv1,
//     SubName2: sn2,
//     SubValue2: sv2,
//     SubName3: sn3,
//     SubValue3: sv3,
//     SubName4: sn4,
//     SubValue4: sv4,
//   };
//   return artifact;
// };


//// //Trying to modularize the big chuck of code into smaller parts 24-01-24
// function Main(piece, statArrays){
//   const [mainStat, setMainStat] = useState('')
//   useEffect(() => {MainStat(piece);}, [piece]);
//   const handleMainSelection = (value) => (setMainStat(value))

//   function MainStat(piece){
//     switch(piece){
//       case "Flower":
//         setMainStat("HP");
//         return;
//       case "Feather":
//         setMainStat("ATK");
//         return;
//       default:
//         setMainStat('')
//         return;
//     }
//   }

//   const [mainValue, setMainValue] = useState('')
//   useEffect(() => {MainValue(mainStat)}, [mainStat]);

//   function MainValue(mainStat){
//     switch(mainStat){
//       case '':
//         setMainValue('')
//         return;
//       case "HP":
//         setMainValue("100")
//         return;
//       case "ATK":
//         setMainValue("todo1")
//         return;
//       case "HP%":
//         setMainValue("todo")
//         return;
//       case "DEF%":
//         setMainValue("Value go here")
//         return;
//       case "ATK%":
//         setMainValue("words words")
//         return;
//       case "Energy Recharge":
//         setMainValue("huh")
//         return;
//       case "Elemental Mastery":
//         setMainValue("this stuff confusing")
//         return;
//       case "Healing Bonus":
//         setMainValue("hey")
//         return;
//       case "Elemental DMG Bonus":
//         setMainValue("ugh")
//         return;
//       case "Critical DMG":
//         setMainValue("moving varibles and values around is tough :(")
//         return;
//       case "Critical Rate":
//         setMainValue("good stat")
//         return;   
//       default:
//         setMainValue('')
//         return;
//     }
//   }
//   return(
//     <>
//     {piece === "Timepiece" && (
//     <MainStringDropMenu  piece={piece} onChange={handleMainSelection} useArray={statArrays.sandMain}/>
//     )}
//     {piece === "Goblet" && (
//       <MainStringDropMenu piece={piece} onChange={handleMainSelection} useArray={statArrays.gobletMain}/>
//     )}
//     {piece === "Circlet" && (
//       <MainStringDropMenu piece={piece} onChange={handleMainSelection} useArray={statArrays.hatMain}/>
//     )}
//     <SubStringDropMenu main={mainValue}/>
//     <ObjectCreate mn={mainStat} ms={mainStat}/>
//     </>
//   )
// } 
// 
// useEffect(()=>{
//   if(selectedData !== null){
//     setPiece(selectedData.Piece);
//     setMainStat(selectedData.MainName);
//     setMainValue(selectedData.MainStat);
//     setSelectedStat1(selectedData.SubName1);
//     setStatValue1(selectedData.SubValue1);
//     setSelectedStat2(selectedData.SubName2);
//     setStatValue2(selectedData.SubValue2);
//     setSelectedStat3(selectedData.SubName3);
//     setStatValue3(selectedData.SubValue3);
//     setSelectedStat4(selectedData.SubName4);
//     setStatValue4(selectedData.SubValue4);
//     setLoaded(false)
//     console.log('loaded')
//     console.log(selectedData)
//   }
// },[selectedData]);

// const a = ObjectCreate(
//   piece, mainStat, mainValue, 
//   selectedStat1, statValue1, 
//   selectedStat2, statValue2, 
//   selectedStat3, statValue3, 
//   selectedStat4, statValue4
// );

// const [reset, setReset] = useState(false);
  // // setReset(true);
  // useEffect(() => {
  //   if (reset) {
      
  //     setReset(false)
  //   }
  // }, [reset]);

  //main={artifact.Piece.Stat} //   mainStat
                    //sub1={artifact.Sub1.Stat} //selectedStat1
                    //sub2={artifact.Sub2.Stat}//selectedStat2
                    //sub3={artifact.Sub3.Stat}//selectedStat3
                    //sub4={artifact.Sub4.Stat}//selectedStat4

                    // reset={reset}
                    // load={loaded}
export default function Reset(reset, setArtifact){
    if (reset) {
        setArtifact(artifact.piece.type)};
        setArtifact(artifact.piece.stat);
        setArtifact(artifact.piece.value);
        setArtifact(artifact.sub1.stat);
        setArtifact(artifact.sub1.value);
        setArtifact(artifact.sub2.stat);
        setArtifact(artifact.sub2.value);
        setArtifact(artifact.sub3.stat);
        setArtifact(artifact.sub3.value);
        setArtifact(artifact.sub4.stat);
        setArtifact(artifact.sub4.value);
        setReset(false);
        console.log(reset);
};